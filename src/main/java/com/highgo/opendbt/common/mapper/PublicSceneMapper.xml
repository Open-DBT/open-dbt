<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.highgo.opendbt.publicLibrary.mapper.PublicSceneMapper">

	<resultMap id="BaseResultMap" type="com.highgo.opendbt.publicLibrary.model.PublicScene">
		<id column="id" property="sceneId" jdbcType="INTEGER" />
		<result column="scene_name" property="sceneName" jdbcType="VARCHAR" />
		<result column="scene_desc" property="sceneDesc" jdbcType="VARCHAR" />
		<result column="init_shell" property="initShell" jdbcType="VARCHAR" />
		<result column="creator" property="creator" jdbcType="INTEGER" />
		<result column="creator_name" property="creatorName" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="VARCHAR" />
	</resultMap>

	<select id="getScene" resultMap="BaseResultMap">
		select
			t_public_scene.id,
			t_public_scene.scene_name,
			t_public_scene.scene_desc,
			t_public_scene.init_shell,
			t_sys_user.user_name as creator_name,
			t_public_scene.create_time
		from t_public_scene
		left join t_sys_user on t_sys_user.id = t_public_scene.creator
		where t_public_scene.delete_flag = 0
		order by t_public_scene.id desc
	</select>

	<select id="getSceneNameList" resultMap="BaseResultMap">
		select
			t_public_scene.id,
			t_public_scene.scene_name
		from t_public_scene
		where t_public_scene.delete_flag = 0
		order by t_public_scene.id desc
	</select>

	<select id="getSceneDetail" resultMap="BaseResultMap">
		select
			t_public_scene.id,
			t_public_scene.scene_name,
			t_public_scene.scene_desc,
			t_public_scene.init_shell,
			t_public_scene.creator,
			t_public_scene.create_time
		from t_public_scene
		where t_public_scene.id = #{sceneId}
	</select>

	<insert id="addScene" useGeneratedKeys="true" keyProperty="sceneId">
		insert into t_public_scene
			(scene_name, scene_desc, init_shell, creator, create_time)
		values
			(#{sceneName}, #{sceneDesc}, #{initShell},#{creator},to_timestamp(#{createTime}, 'yyyy-MM-DD hh24:mi:ss'))
	</insert>

	<update id="updateScene">
		update t_public_scene
		<set>
			<if test="sceneName != null">
	            scene_name = #{sceneName},
	        </if>
	        <if test="sceneDesc != null">
	            scene_desc = #{sceneDesc},
	        </if>
	        <if test="initShell != null">
	            init_shell = #{initShell},
	        </if>
		</set>
		where id = #{sceneId}
	</update>

	<update id="deleteScene">
		update t_public_scene set delete_flag = 1, delete_time = current_timestamp where id = #{sceneId}
	</update>

</mapper>
